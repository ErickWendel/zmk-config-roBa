#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <5>;
    scroll-layers = <6>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        cb_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 11>;
            timeout-ms = <30>;
        };

        cb_at {
            bindings = <&kp AT>;
            key-positions = <2 12>;
            timeout-ms = <30>;
        };

        cb_hash {
            bindings = <&kp HASH>;
            key-positions = <3 13>;
            timeout-ms = <30>;
        };

        cb_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 14>;
            timeout-ms = <30>;
        };

        cb_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <4 14>;
            timeout-ms = <30>;
        };

        cb_caret {
            bindings = <&kp CARET>;
            key-positions = <5 17>;
            timeout-ms = <30>;
        };

        cb_amps {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        cb_mult {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
            timeout-ms = <30>;
        };

        cb_lparen {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20 20>;
            timeout-ms = <30>;
        };

        cb_rparen {
            bindings = <&kp AMPERSAND>;
            key-positions = <10 0>;
            timeout-ms = <30>;
        };

        play-pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <17 16>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <14 13>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <25 26>;
        };

        select-all {
            bindings = <&kp LG(A)>;
            key-positions = <4 3>;
        };

        next-song {
            bindings = <&kp C_NEXT>;
            key-positions = <29 28>;
        };

        prev-song {
            bindings = <&kp C_PREV>;
            key-positions = <29 30>;
        };

        interrogation {
            bindings = <&kp QUESTION>;
            key-positions = <5 6>;
        };

        togglescroll {
            bindings = <&tog 6>;
            key-positions = <19 18>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <17 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        layer3or4: layer3or4 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER3OR4";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R         &kp T                                                  &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F         &kp G       &kp LS(LG(S))               &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V         &kp B       &kp COLON                   &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_GUI  &layer3or4  &lt_to_layer_0 2 SPACE      &kp BACKSPACE  &lt 1 ENTER                             &mo 4
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        numlayer {
            bindings = <
&kp LBKT      &kp N7  &kp N8  &kp N9      &kp RBKT                                       &kp K_MUTE  &kp LG(MINUS)  &kp C_VOL_DN  &kp C_VOL_UP  &kp LG(EQUAL)
&kp LS(PLUS)  &kp N4  &kp N5  &kp N6      &kp EQUAL  &kp LG(LC(SPACE))      &kp LC(DOT)  &trans      &trans         &trans        &trans        &trans
&kp LS(STAR)  &kp N1  &kp N2  &kp N3      &kp BSLH   &trans                 &kp LC(C)    &kp LC(L)   &kp LG(BSLH)   &trans        &trans        &trans
&trans        &trans  &trans  &kp PERIOD  &kp N0     &kp MINUS              &trans       &trans                                                 &trans
            >;
        };

        symlayer {
            bindings = <
&kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)                                 &kp LBKT    &kp GRAVE   &kp BSLH    &kp RIGHT   &kp RBKT
&kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LCTRL      &kp EQUAL     &trans             &trans      &trans      &trans      &trans      &trans      &trans
&kp TILDE      &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)  &trans             &kp LG(N5)  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &trans
&trans         &trans        &trans         &kp LS(RPAR)   &kp MINUS     &kp LS(UNDER)      &trans      &trans                                          &trans
            >;
        };

        navlayer {
            bindings = <
&kp ESCAPE    &kp LS(LG(GRAVE))  &kp LC(LS(TAB))     &kp LC(TAB)       &kp LG(GRAVE)                          &kp LG(Z)   &kp LG(C)  &kp LG(V)  &kp LG(Z)  &kp LS(LG(Z))
&kp LEFT_GUI  &kp LEFT_ALT       &kp LEFT_SHIFT      &kp LEFT_CONTROL  &trans         &trans      &trans      &kp LEFT    &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans        &trans             &kp LG(LA(ESCAPE))  &kp LG(SPACE)     &trans         &trans      &trans      &kp LG(UP)  &kp PG_DN  &kp PG_UP  &kp END    &trans
&trans        &trans             &trans              &trans            &trans         &trans      &kp DELETE  &trans                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        funlayer {
            bindings = <
&kp F12      &kp F12  &kp F7  &kp F8  &kp F9                                         &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp F11      &kp F11  &kp F4  &kp F5  &kp F6  &kp LG(LS(NUMBER_4))      &trans       &trans         &trans        &trans        &trans        &trans
&bt BT_CLR   &kp F10  &kp F1  &kp F2  &kp F3  &kp LG(LS(NUMBER_3))      &bootloader  &trans         &trans        &trans        &trans        &bt BT_CLR
&bootloader  &trans   &trans  &trans  &trans  &trans                    &trans       &kp LG(LC(Q))                                            &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans         &trans        &trans                          &trans  &kp LC(LEFT)          &kp LC(UP_ARROW)  &kp LC(RIGHT)  &trans
&trans  &trans  &kp LG(MINUS)  &kp LG(PLUS)  &kp LG(N0)  &trans      &trans  &trans  &mkp MB1              &mkp MB3          &mkp MB2       &trans
&trans  &trans  &trans         &trans        &trans      &trans      &trans  &trans  &kp LG(LS(NUMBER_4))  &trans            &trans         &trans
&trans  &trans  &trans         &trans        &trans      &trans      &trans  &trans                                                         &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };
    };
};
